// <auto-generated />
using System;
using ClearanceCycle.DataAcess.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClearanceCycle.DataAcess.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20250220000949_init6")]
    partial class init6
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClearanceCycle.Domain.Entities.ApprovalGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupTypeId")
                        .HasColumnType("int")
                        .HasColumnName("GroupTypeID");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.HasFillFactor(b.HasKey("Id"), 75);

                    b.HasIndex(new[] { "GroupTypeId" }, "IX_approvalGroups_GroupTypeID");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "GroupTypeId" }, "IX_approvalGroups_GroupTypeID"), 75);

                    b.ToTable("approvalGroups", (string)null);
                });

            modelBuilder.Entity("ClearanceCycle.Domain.Entities.ApprovalGroupEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApprovalGroupId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.HasFillFactor(b.HasKey("Id"), 75);

                    b.HasIndex(new[] { "ApprovalGroupId" }, "IX_ApprovalGroupEmployees_ApprovalGroupId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ApprovalGroupId" }, "IX_ApprovalGroupEmployees_ApprovalGroupId"), 75);

                    b.HasIndex(new[] { "EmployeeId" }, "IX_ApprovalGroupEmployees_EmployeeId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "EmployeeId" }, "IX_ApprovalGroupEmployees_EmployeeId"), 75);

                    b.ToTable("ApprovalGroupEmployees");
                });

            modelBuilder.Entity("ClearanceCycle.Domain.Entities.ClearanceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActionAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<int>("ClearanceRequestId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClearanceRequestId");

                    b.ToTable("ClearanceHistories");
                });

            modelBuilder.Entity("ClearanceCycle.Domain.Entities.ClearanceReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClearanceReasons");
                });

            modelBuilder.Entity("ClearanceCycle.Domain.Entities.ClearanceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClearanceReasonId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastWorkingDayDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResignationFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResigneeHrId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResigneeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int>("StepApprovalGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClearanceReasonId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StepApprovalGroupId");

                    b.ToTable("ClearanceRequests");
                });

            modelBuilder.Entity("ClearanceCycle.Domain.Entities.ClearanceStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApprovalGroupId")
                        .HasColumnType("int");

                    b.Property<int>("CycleId")
                        .HasColumnType("int");

                    b.Property<bool>("IsParallel")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("StepOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ClearanceSteps");
                });

            modelBuilder.Entity("ClearanceCycle.Domain.Entities.ClearanceStepStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApprovalGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StepId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalGroupId");

                    b.HasIndex("RequestId");

                    b.HasIndex("StepId");

                    b.ToTable("ClearanceStepStatuses");
                });

            modelBuilder.Entity("ClearanceCycle.Domain.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("DirHrId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MangerHrId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.HasFillFactor(b.HasKey("Id"), 75);

                    b.HasIndex(new[] { "CompanyId" }, "IX_Departments_CompanyId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CompanyId" }, "IX_Departments_CompanyId"), 75);

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("ClearanceCycle.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Addresss")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArabicFullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("ContractTybeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("DirectMangerHrId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DueVacation")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeePositionId")
                        .HasColumnType("int");

                    b.Property<bool>("ForceToChangePassword")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FunctionId")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<DateTime>("HiringDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HrId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastReset")
                        .HasColumnType("datetime2");

                    b.Property<int>("LayerId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("MajourAreaId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NavColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PasswordExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlanOptionId")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PreviousVacation")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SidbarColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SmsRestPasswordDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("SubDepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("TakenVacation")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VactionBalance")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.HasFillFactor(b.HasKey("Id"), 75);

                    b.HasIndex(new[] { "Active" }, "IX_Employees_Active_A1BEE");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Active" }, "IX_Employees_Active_A1BEE"), 75);

                    b.HasIndex(new[] { "Active", "HiringDate" }, "IX_Employees_Active_HiringDate_152A4");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Active", "HiringDate" }, "IX_Employees_Active_HiringDate_152A4"), 75);

                    b.HasIndex(new[] { "Active", "HiringDate" }, "IX_Employees_Active_HiringDate_F6C90");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "Active", "HiringDate" }, "IX_Employees_Active_HiringDate_F6C90"), 75);

                    b.HasIndex(new[] { "CompanyId" }, "IX_Employees_CompanyId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CompanyId" }, "IX_Employees_CompanyId"), 75);

                    b.HasIndex(new[] { "CompanyId", "StatusId" }, "IX_Employees_CompanyId_StatusId_6D0CB");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CompanyId", "StatusId" }, "IX_Employees_CompanyId_StatusId_6D0CB"), 75);

                    b.HasIndex(new[] { "CompanyId", "StatusId" }, "IX_Employees_CompanyId_StatusId_86C8B");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CompanyId", "StatusId" }, "IX_Employees_CompanyId_StatusId_86C8B"), 75);

                    b.HasIndex(new[] { "CompanyId", "StatusId" }, "IX_Employees_CompanyId_StatusId_8E816");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CompanyId", "StatusId" }, "IX_Employees_CompanyId_StatusId_8E816"), 75);

                    b.HasIndex(new[] { "CompanyId", "StatusId" }, "IX_Employees_CompanyId_StatusId_90593");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "CompanyId", "StatusId" }, "IX_Employees_CompanyId_StatusId_90593"), 75);

                    b.HasIndex(new[] { "ContractTybeId" }, "IX_Employees_ContractTybeId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ContractTybeId" }, "IX_Employees_ContractTybeId"), 75);

                    b.HasIndex(new[] { "DepartmentId" }, "IX_Employees_DepartmentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DepartmentId" }, "IX_Employees_DepartmentId"), 75);

                    b.HasIndex(new[] { "DepartmentId", "StatusId" }, "IX_Employees_DepartmentId_StatusId_42489");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DepartmentId", "StatusId" }, "IX_Employees_DepartmentId_StatusId_42489"), 75);

                    b.HasIndex(new[] { "DepartmentId", "StatusId" }, "IX_Employees_DepartmentId_StatusId_57CDB");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DepartmentId", "StatusId" }, "IX_Employees_DepartmentId_StatusId_57CDB"), 75);

                    b.HasIndex(new[] { "DepartmentId", "StatusId" }, "IX_Employees_DepartmentId_StatusId_DCF26");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DepartmentId", "StatusId" }, "IX_Employees_DepartmentId_StatusId_DCF26"), 75);

                    b.HasIndex(new[] { "EmployeePositionId" }, "IX_Employees_EmployeePositionId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "EmployeePositionId" }, "IX_Employees_EmployeePositionId"), 75);

                    b.HasIndex(new[] { "ForceToChangePassword" }, "IX_Employees_ForceToChangePassword_2991F");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "ForceToChangePassword" }, "IX_Employees_ForceToChangePassword_2991F"), 75);

                    b.HasIndex(new[] { "FunctionId" }, "IX_Employees_FunctionId");

                    b.HasIndex(new[] { "LayerId" }, "IX_Employees_LayerId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "LayerId" }, "IX_Employees_LayerId"), 75);

                    b.HasIndex(new[] { "LocationId" }, "IX_Employees_LocationId");

                    b.HasIndex(new[] { "MajourAreaId" }, "IX_Employees_MajourAreaId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "MajourAreaId" }, "IX_Employees_MajourAreaId"), 75);

                    b.HasIndex(new[] { "PlanOptionId" }, "IX_Employees_PlanOptionId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "PlanOptionId" }, "IX_Employees_PlanOptionId"), 75);

                    b.HasIndex(new[] { "StatusId" }, "IX_Employees_StatusId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusId" }, "IX_Employees_StatusId"), 75);

                    b.HasIndex(new[] { "StatusId" }, "IX_Employees_StatusId_0C5CB");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusId" }, "IX_Employees_StatusId_0C5CB"), 75);

                    b.HasIndex(new[] { "StatusId" }, "IX_Employees_StatusId_20594");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusId" }, "IX_Employees_StatusId_20594"), 75);

                    b.HasIndex(new[] { "StatusId" }, "IX_Employees_StatusId_225DE");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusId" }, "IX_Employees_StatusId_225DE"), 75);

                    b.HasIndex(new[] { "StatusId" }, "IX_Employees_StatusId_3AF0E");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusId" }, "IX_Employees_StatusId_3AF0E"), 75);

                    b.HasIndex(new[] { "StatusId" }, "IX_Employees_StatusId_57B12");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusId" }, "IX_Employees_StatusId_57B12"), 75);

                    b.HasIndex(new[] { "StatusId", "Active" }, "IX_Employees_StatusId_Active_44491");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusId", "Active" }, "IX_Employees_StatusId_Active_44491"), 75);

                    b.HasIndex(new[] { "StatusId", "Active" }, "IX_Employees_StatusId_Active_558CA");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusId", "Active" }, "IX_Employees_StatusId_Active_558CA"), 75);

                    b.HasIndex(new[] { "StatusId", "Active" }, "IX_Employees_StatusId_Active_65349");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusId", "Active" }, "IX_Employees_StatusId_Active_65349"), 75);

                    b.HasIndex(new[] { "StatusId", "Active" }, "IX_Employees_StatusId_Active_C4715");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusId", "Active" }, "IX_Employees_StatusId_Active_C4715"), 75);

                    b.HasIndex(new[] { "StatusId", "Active" }, "IX_Employees_StatusId_Active_DAF2E");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusId", "Active" }, "IX_Employees_StatusId_Active_DAF2E"), 75);

                    b.HasIndex(new[] { "StatusId", "Active", "HiringDate" }, "IX_Employees_StatusId_Active_HiringDate_37994");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusId", "Active", "HiringDate" }, "IX_Employees_StatusId_Active_HiringDate_37994"), 75);

                    b.HasIndex(new[] { "StatusId", "Active", "HiringDate" }, "IX_Employees_StatusId_Active_HiringDate_A6761");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusId", "Active", "HiringDate" }, "IX_Employees_StatusId_Active_HiringDate_A6761"), 75);

                    b.HasIndex(new[] { "StatusId" }, "IX_Employees_StatusId_B7443");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusId" }, "IX_Employees_StatusId_B7443"), 75);

                    b.HasIndex(new[] { "StatusId" }, "IX_Employees_StatusId_C3177");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusId" }, "IX_Employees_StatusId_C3177"), 75);

                    b.HasIndex(new[] { "StatusId" }, "IX_Employees_StatusId_D6D18");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusId" }, "IX_Employees_StatusId_D6D18"), 75);

                    b.HasIndex(new[] { "StatusId" }, "IX_Employees_StatusId_F0BB8");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusId" }, "IX_Employees_StatusId_F0BB8"), 75);

                    b.HasIndex(new[] { "StatusId" }, "IX_Employees_StatusId_FC9AA");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusId" }, "IX_Employees_StatusId_FC9AA"), 75);

                    b.HasIndex(new[] { "StatusId", "HiringDate" }, "IX_Employees_StatusId_HiringDate_07DB3");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusId", "HiringDate" }, "IX_Employees_StatusId_HiringDate_07DB3"), 75);

                    b.HasIndex(new[] { "StatusId", "HiringDate" }, "IX_Employees_StatusId_HiringDate_726FA");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusId", "HiringDate" }, "IX_Employees_StatusId_HiringDate_726FA"), 75);

                    b.HasIndex(new[] { "StatusId", "HiringDate" }, "IX_Employees_StatusId_HiringDate_79C72");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusId", "HiringDate" }, "IX_Employees_StatusId_HiringDate_79C72"), 75);

                    b.HasIndex(new[] { "StatusId", "HiringDate" }, "IX_Employees_StatusId_HiringDate_7C71D");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusId", "HiringDate" }, "IX_Employees_StatusId_HiringDate_7C71D"), 75);

                    b.HasIndex(new[] { "StatusId", "HiringDate" }, "IX_Employees_StatusId_HiringDate_930ED");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusId", "HiringDate" }, "IX_Employees_StatusId_HiringDate_930ED"), 75);

                    b.HasIndex(new[] { "StatusId", "HiringDate" }, "IX_Employees_StatusId_HiringDate_9B93F");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusId", "HiringDate" }, "IX_Employees_StatusId_HiringDate_9B93F"), 75);

                    b.HasIndex(new[] { "StatusId", "HiringDate" }, "IX_Employees_StatusId_HiringDate_D42D6");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusId", "HiringDate" }, "IX_Employees_StatusId_HiringDate_D42D6"), 75);

                    b.HasIndex(new[] { "StatusId", "HiringDate" }, "IX_Employees_StatusId_HiringDate_F2B4C");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "StatusId", "HiringDate" }, "IX_Employees_StatusId_HiringDate_F2B4C"), 75);

                    b.HasIndex(new[] { "SubDepartmentId" }, "IX_Employees_SubDepartmentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "SubDepartmentId" }, "IX_Employees_SubDepartmentId"), 75);

                    b.HasIndex(new[] { "TeamId" }, "IX_Employees_TeamId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "TeamId" }, "IX_Employees_TeamId"), 75);

                    b.ToTable("Employees", t =>
                        {
                            t.HasTrigger("insteadOfDeleteEmployees");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("ClearanceCycle.Domain.Entities.Function", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubDepartmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubDepartmentId");

                    b.ToTable("Function");
                });

            modelBuilder.Entity("ClearanceCycle.Domain.Entities.MajourArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.HasFillFactor(b.HasKey("Id"), 75);

                    b.ToTable("MajourAreas");
                });

            modelBuilder.Entity("ClearanceCycle.Domain.Entities.StepApprovalGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<string>("ApprovalGroupId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrentStepId")
                        .HasColumnType("int");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StepApprovalGroups");
                });

            modelBuilder.Entity("ClearanceCycle.Domain.Entities.SubDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("HeadCount")
                        .HasColumnType("int");

                    b.Property<string>("ManagerHrid")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("ManagerHRID");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Occupied")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.HasFillFactor(b.HasKey("Id"), 75);

                    b.HasIndex(new[] { "DepartmentId" }, "IX_SubDepartments_DepartmentId");

                    SqlServerIndexBuilderExtensions.HasFillFactor(b.HasIndex(new[] { "DepartmentId" }, "IX_SubDepartments_DepartmentId"), 75);

                    b.ToTable("SubDepartments");
                });

            modelBuilder.Entity("ClearanceCycle.Domain.Entities.ApprovalGroupEmployee", b =>
                {
                    b.HasOne("ClearanceCycle.Domain.Entities.ApprovalGroup", "ApprovalGroup")
                        .WithMany("ApprovalGroupEmployees")
                        .HasForeignKey("ApprovalGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClearanceCycle.Domain.Entities.Employee", "Employee")
                        .WithMany("ApprovalGroupEmployees")
                        .HasForeignKey("EmployeeId")
                        .IsRequired();

                    b.Navigation("ApprovalGroup");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ClearanceCycle.Domain.Entities.ClearanceHistory", b =>
                {
                    b.HasOne("ClearanceCycle.Domain.Entities.ClearanceRequest", "ClearanceRequest")
                        .WithMany("ClearanceHistories")
                        .HasForeignKey("ClearanceRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClearanceRequest");
                });

            modelBuilder.Entity("ClearanceCycle.Domain.Entities.ClearanceRequest", b =>
                {
                    b.HasOne("ClearanceCycle.Domain.Entities.ClearanceReason", "ClearanceReason")
                        .WithMany()
                        .HasForeignKey("ClearanceReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClearanceCycle.Domain.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClearanceCycle.Domain.Entities.StepApprovalGroup", null)
                        .WithMany("ClearanceRequests")
                        .HasForeignKey("StepApprovalGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClearanceReason");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ClearanceCycle.Domain.Entities.ClearanceStepStatus", b =>
                {
                    b.HasOne("ClearanceCycle.Domain.Entities.ApprovalGroup", "ApprovalGroup")
                        .WithMany()
                        .HasForeignKey("ApprovalGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClearanceCycle.Domain.Entities.ClearanceRequest", "Request")
                        .WithMany("ClearanceStepStatuses")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClearanceCycle.Domain.Entities.ClearanceStep", "Step")
                        .WithMany()
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovalGroup");

                    b.Navigation("Request");

                    b.Navigation("Step");
                });

            modelBuilder.Entity("ClearanceCycle.Domain.Entities.Employee", b =>
                {
                    b.HasOne("ClearanceCycle.Domain.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .IsRequired();

                    b.HasOne("ClearanceCycle.Domain.Entities.Function", "Function")
                        .WithMany("Employees")
                        .HasForeignKey("FunctionId");

                    b.HasOne("ClearanceCycle.Domain.Entities.MajourArea", "MajourArea")
                        .WithMany("Employees")
                        .HasForeignKey("MajourAreaId")
                        .IsRequired();

                    b.HasOne("ClearanceCycle.Domain.Entities.SubDepartment", "SubDepartment")
                        .WithMany("Employees")
                        .HasForeignKey("SubDepartmentId")
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Function");

                    b.Navigation("MajourArea");

                    b.Navigation("SubDepartment");
                });

            modelBuilder.Entity("ClearanceCycle.Domain.Entities.Function", b =>
                {
                    b.HasOne("ClearanceCycle.Domain.Entities.SubDepartment", "SubDepartment")
                        .WithMany("Functions")
                        .HasForeignKey("SubDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubDepartment");
                });

            modelBuilder.Entity("ClearanceCycle.Domain.Entities.SubDepartment", b =>
                {
                    b.HasOne("ClearanceCycle.Domain.Entities.Department", "Department")
                        .WithMany("SubDepartments")
                        .HasForeignKey("DepartmentId")
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ClearanceCycle.Domain.Entities.ApprovalGroup", b =>
                {
                    b.Navigation("ApprovalGroupEmployees");
                });

            modelBuilder.Entity("ClearanceCycle.Domain.Entities.ClearanceRequest", b =>
                {
                    b.Navigation("ClearanceHistories");

                    b.Navigation("ClearanceStepStatuses");
                });

            modelBuilder.Entity("ClearanceCycle.Domain.Entities.Department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("SubDepartments");
                });

            modelBuilder.Entity("ClearanceCycle.Domain.Entities.Employee", b =>
                {
                    b.Navigation("ApprovalGroupEmployees");
                });

            modelBuilder.Entity("ClearanceCycle.Domain.Entities.Function", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ClearanceCycle.Domain.Entities.MajourArea", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("ClearanceCycle.Domain.Entities.StepApprovalGroup", b =>
                {
                    b.Navigation("ClearanceRequests");
                });

            modelBuilder.Entity("ClearanceCycle.Domain.Entities.SubDepartment", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Functions");
                });
#pragma warning restore 612, 618
        }
    }
}
